import { RepkaSceneName } from '../RepkaSceneName';
import { emoji } from '../emoji';
import { upperFirst } from '../../upperFirst';
import { Character } from '../Character';
import { knownChars } from '../knownChars';
import { RepkaTransition } from '../RepkaTransition';
import { replyRandomSound } from '../replies/replyRandomSound';

export const TaleChain: RepkaTransition = {
    reply(reply, model) {
        const lastCalledChar = model.lastCalledCharacter();
        const knownChar = knownChars.find((char) => char.trigger(lastCalledChar));

        reply.withText(`–Ø ${Character.nominative(lastCalledChar)}.`);

        if (knownChar) {
            replyRandomSound(reply, knownChar);

            if (knownChar.image) {
                reply.withImage(knownChar.image);
            }
        }

        reply.selectRandom(
            (phrase) => {
                reply.withText(phrase);
                model.setLastCharacterPhrase(phrase);
            },
            ['–ü–æ–º–æ–≥—É –≤–∞–º.', '–ë—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å.', '–ü–æ–º–æ–≥—É –≤—ã—Ç—è–Ω—É—Ç—å —Ä–µ–ø–∫—É.'],
            1,
            (phrase) => !model.isLastCharacterPhrase(phrase)
        );

        /**
         * –¶–µ–ø–æ—á–∫–∞
         */
        const text: string[] = [];
        const tts: string[] = [];

        for (const pair of model.pairs()) {
            const obj = pair[0];
            const sub = pair[1];
            const em = emoji[Character.nominative(sub)] || emoji[sub.normal];
            const emojiPart = em ? ` ${em}` : '';

            text.push(`${Character.nominative(sub)}${emojiPart} –∑–∞ ${Character.accusative(obj)}`);
            tts.push(`${Character.nominativeTts(sub)} –∑–∞ ${Character.accusativeTts(obj)}`);
        }

        text.reverse();
        tts.reverse();

        reply.withText(
            [upperFirst(text.join(', ')), joinCharactersPairsTts(tts)],
            [`, –¥–µ–¥–∫–∞ üë¥ –∑–∞ —Ä–µ–ø–∫—É.`, ' - –¥–µ–¥–∫–∞ –∑–∞ —Ä–µ–ø–∫—É.']
        );

        /**
         * –¢—è–Ω—É—Ç-–ø–æ—Ç—è–Ω—É—Ç
         */
        if (model.isTaleEnd()) {
            reply.withText([
                '–¢—è–Ω—É—Ç-–ø–æ—Ç—è–Ω—É—Ç üéâ –≤—ã—Ç—è–Ω—É–ª–∏ —Ä–µ–ø–∫—É!',
                '–¢—è–Ω—É—Ç-–ø–æ—Ç—è–Ω—É—Ç <speaker audio="alice-sounds-human-kids-1.opus"> - –≤—ã—Ç—è–Ω—É–ª–∏ —Ä–µ–ø–∫—É!',
            ]);
        } else {
            reply.withText(`–¢—è–Ω—É—Ç-–ø–æ—Ç—è–Ω—É—Ç ‚Äî –≤—ã—Ç—è–Ω—É—Ç—å –Ω–µ –º–æ–≥—É—Ç.`);
        }
    },

    onTransition(model) {
        if (model.isTaleEnd()) {
            return RepkaSceneName.TaleEnd;
        }

        return RepkaSceneName.Call–°haracter;
    },
};

/**
 * –ü—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–ª–∏–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏, –Ω—É–∂–Ω–æ
 * –∏–Ω–æ–≥–¥–∞ —Å—Ç–∞–≤–∏—Ç—å —Ç–æ—á–∫–∏ –≤ tts, –∏–Ω–∞—á–µ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç
 * —É–∂–∞—Å–Ω—ã–π –¥–µ—Ñ–µ–∫—Ç —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏.
 * @param pairs –∫—Ç–æ –∑–∞ –∫–æ–≥–æ
 */
function joinCharactersPairsTts(pairs: string[]) {
    const result = [];
    const SEPARATED_PAIRS = 4;

    for(let i = 0; i < pairs.length; i++) {
        const separator = i > 0 && i % SEPARATED_PAIRS - 3 === 0 ? '. ' : ' - ';

        result.push(pairs[i], separator);
    }

    result.pop();

    return result.join('');
}
